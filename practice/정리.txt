1. 다중성
  • 다대일: @ManyToOne
  • 일대다: @OneToMany
  • 일대일: @OneToOne
  • 다대다: @ManyToMany

2. 단방향, 양방향
  • 테이블 : 외래키 하나로 양쪽 조인 가능
           방향이라는 개념이 사실은 없음
  • 객체 : 참조(Reference)용 필드가 있는 쪽으로만 참조 가능
          한쪽만 참조하면 단방향
          양쪽이 서로 참조하면 양방향 (사실은 단방향이 2개임)

3. 연관관계의 주인
  • 테이블은 외래 키 하나로 두 테이블이 연관관계를 맺음
  • 객체 양방향 관계는 A->B, B->A 처럼 참조가 2군데
  • 객체 양방향 관계는 참조가 2군데 있고, 둘 중 테이블의 외래 키를 관리할 곳을 지정해야함.
  • 연관관계의 주인 : 외래 키를 관리하는 참조
  • 주인의 반대편 : 외래 키에 영향을 주지 않음, 단순 조회만 가능

JPA에서의 Annotation은 DB와 mapping 하기 위해서 -> DB 관점에서의 다중성으로 고려해서 적용하면 된다.

※ 실무에서 다대다는 사용 X.
  다대일을 가장 많이 사용

사용하면 안되는 이유 :

※ 다대일 단방향: 가장 많이 사용되는 연관관계

※ 다대일 양방향: 외래키가 있는 곳이 연관관계의 주인
             양쪽을 서로 참조하도록 개발

※ 일대다 단방향: 일대다 단방향은 일이 연관관계의 주인
             테이블 일대다 관계는 항상 다 쪽에 외래키가 있음
             객체와 테이블의 차이 때문에 반대편 테이블의 외래 키를 관리하는 특이한 구조
             @JoinColumn을 꼭 사용해야함. 그렇지 않으면 조인 테이블 방식(중간에 테이블 하나 추가) 사용
             사용 권장 X. 코드상의 기능 자체에는 문제가 크게 없으나 사용자가 추적하기 힘들고 조금 복잡하게 돌아가는 느낌임
             일대다에서 양방향 필요시 다대일 양방향으로 가는게 좋음.

※ 일대일 단방향(주 테이블 외래 키): 다대일 단방향 매핑과 유사
                            양방향을 하고 싶을 시 다대일 양방향처럼 외래 키가 있는 곳이 연관관계의 주인, 반대편 mappedBy 적용
                            대상 테이블 외래키는 JPA 지원 X.

※ 다대다: RDB에서 정규화된 테이블 2개로 다대다 관계를 표현할 수 없음.
        따라서 연결테이블을 추가해서 일대다, 다대일 관계로 표현해야하는데 이 연결 테이블이 단순히 연결만하지 않고 추가적인 컬럼이 생길 수 있으므로 사용 권장 X.
        한계를 극복하기 위해선 연결 테이블을 Entity로 승격해서 사용해야함
        @ManyToMany -> @OneToMany, @ManyToOne

