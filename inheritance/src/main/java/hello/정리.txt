상속관계 매핑
 1. Relational DataBase는 상속관계라는 것이 존재하지 않음.
 2. 슈퍼, 서브 타입 관계라는 모델링 기법이 객체 상속과 유사하다.
 3. 상속관계 매핑 : 객체의 상속과 구조와 DB의 슈퍼타입 서브타입 관게를 매핑


1. 조인 전략
  • 장점
    • 테이블 정규화
    • 외래 키 참조 무결성 제약조건 활용 가능
    • 저장공간 효율화

  • 단점
    • 조회시 조인을 많이 사용, 성능 저하
    • 조회 쿼리가 복잡하다
    • 데이터 저장시 INSERT SQL 2번 호출

※ 조인 전략이 정석이라고 보고 들어가면 된다. 객체랑도 잘 맞고 정규화도 되고 설계자 입장에서도 깔끔하게 맞아 떨어진다.

2. 단일 테이블 전략
 • 장점
   • 조인이 필요 없으므로 일반적으로 조회 성능이 빠름
   • 조회 쿼리가 단순

 • 단점
   • 자식 엔티티가 매핑한 컬럼은 모두 null 허용
   • 단일 테이블에 모든것을 저장하므로 테이블이 커질 수 있고, 상황에 따라 조회 성능이 오히려 낮아질 수 있다.

※ null로 인해 무결성에 대한 문제가 생길 수 있고, 상황에 따라 조인보다 성능이 좋을수도, 나쁠수도 있다.

3. 구현 클래스마다 테이블 전략
 • 장점
   • 서브 타입을 명확하게 구분해서 처리할 때 효과적
   • not null 제약조건 사용 가능
 • 단점
   • 여러 자식테이블을 함께 조회할 때 성능이 느림(UNION SQL)
   • 자식 테이블을 통합해서 쿼리하기 어려움

※ 쓰면 안되는 전략. DB 설계자와 ORM 전문가 둘 다 추천 X



@MappedSuperclass: 공통 매핑 정보가 필요할 때 사용
 • 상속관계 매핑 X
 • Entity X, Table과 매핑 X
 • 부모 클래스를 상속받는 자식 클래스에 매핑 정보만 제공
 • 조회, 검색 불가(em.find(BaseEntity) 불가)
 • 직접 생성해서 사용할 일이 없으므로 추상 클래스 권장