Proxy
  • em.find() vs em.getReference()
  • em.find(): DB를 통해서 실제 엔티티 객체 조회
      em.getReference(): DB 조회를 미루는 가짜(Proxy) 엔티티 객체 조회
        —> DB에 쿼리가 나가지 않는데 객체 조회


 ※ 특징
   • 실제 클래스를 상속 받아서 만들어짐
   • 실제 클래스와 겉 모양이 같다.
   • 사용하는 입장에서는 진짜 객체인지 프록시 객체인지 구분하지 않고 사용하면 됨(이론상)
   • 프록시 객체는 실제 객체의 참조(target)을 보관
   • 프록시 객체를 호출하면 프록시 객체는 실제 객체의 메소드 호출
   • 프록시 객체는 처음 사용할 때 한번만 초기화
   • 프록시 객체를 초기화 할 때, 프록시 객체가 실제 엔티티로 바뀌는 것은 아님, 초기화 되면 프록시 객체를 통해서 실제 엔티티에 접근 가능
   • 프록시 객체는 원본 엔티티를 상속받음, 따라서 타입 체크 시 주의해야함( == 비교 실패, 대신 instance of 사용)
   • 영속성 컨텍스트에 찾는 엔티티가 이미 있으면, em.getReference()를 호출해도 실제 엔티티 반환
   • 영속성 컨텍스트의 도움을 받을 수 없는 준영속 상태일 때, 프록시를 초기화하면 문제 발생



 ※ 프록시 객체의 초기화
   1) 요청이 들어오면 프록시 객체가 영속성 컨텍스트에게 초기화 요청
   2) 영속성 컨텍스트는 DB를 조회해서 실제 Entity생성
   3) 실제 Entitiy와 Proxy 객체를 연결.



지연로딩
   • LAZY로 설정 시에 조회시 Proxy 로 가지고온다
   • 가지고온 Proxy안의 메소드를 사용할 때, 쿼리가 나가는 방식

즉시로딩
   • EAGER로 설정 시에 조회시 join을 통하여 한번에 가지고온다.(대부분의 Hibernate가)

프록시와 즉시로딩 주의
   • 가급적 지연로딩만 사용(실무에서)
   • 즉시로딩을 적용하면 예상하지 못한 SQL이 발생
   • 즉시로딩은 JPQL에서 N+1 문제를 일으킨다.
   • ManyToOne, OneToOne은 기본이 즉시로딩으로 설정
   • OneToMany, ManyToMany는 기본이 지연로딩으로 설정

※ 모든 연관관계에서는 지연로딩만 사용하고, fetch 조인이나 엔티티 그래프 기능을 이용.